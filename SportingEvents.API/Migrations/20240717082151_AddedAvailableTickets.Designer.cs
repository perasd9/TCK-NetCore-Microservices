// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SportingEvents.API.Infrastructure;

#nullable disable

namespace SportingEvents.API.Migrations
{
    [DbContext(typeof(SportingEventsContext))]
    [Migration("20240717082151_AddedAvailableTickets")]
    partial class AddedAvailableTickets
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SportingEvents.API.Core.SportingEvent", b =>
                {
                    b.Property<Guid>("SportingEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AvailableTickets")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfSportingEvent")
                        .HasColumnType("datetime2");

                    b.Property<string>("SportingEventDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SportingEventName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("SportingEventTicketPrice")
                        .HasColumnType("float");

                    b.Property<Guid>("TypeOfSportingEventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SportingEventId");

                    b.ToTable("SportingEvent", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
